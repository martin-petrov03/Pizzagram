const uniqid = require('uniqid');

describe('Tests main functionalities', () => {
  // beforeEach(() => {
  //   cy.visit('/')
  // })

  it('loads products', () => {
    cy.visit('/');
    cy.get('.main-container')
      .get('.product-item')
      .should(($arrOfDivs) => {
        expect($arrOfDivs.length).to.be.greaterThan(0)
      })
  })

  // it('register', () => {
  //   cy.visit('/register')
  //     .get('.login-container')
  //     .get('input')
  //     .eq(0)
  //     .type(uniqid() + '@gmail.com')
  //     .get('input')
  //     .eq(1)
  //     .type('password')
  //     .get('input')
  //     .eq(2)
  //     .type('password')
  //     .get('.login-container form')
  //     .submit()
  //   cy.url()
  //   .should('to.include', '/login')
  // })

  it('login', () => {
    cy.visit('/login')
      .get('.login-container')
      .get('input')
      .eq(0)
      .type('m@m.bg')
      .get('input')
      .eq(1)
      .type('12345')
      .get('.login-container form')
      .submit()
  })

  it('like product', () => {
    cy.visit('/')
      .get('.actions i')
      .first()
      .click()
  })

  it('add product and remove it', () => {
    //login
    cy.visit('/login')
      .get('.login-container')
      .get('input')
      .eq(0)
      .type('m@m.bg')
      .get('input')
      .eq(1)
      .type('12345')
      .get('.login-container form')
      .submit()

    cy.visit('/product/add')
      .get('form')
      .get('input')
      .eq(0)
      .type('Example Product')
      .get('input')
      .eq(1)
      .type('Example ProductExample ProductExample ProductExample ProductExample Product')
      .get('input')
      .eq(2)
      .type('https://pizza.png')
      .get('form')
      .submit()
    
    cy.visit('/');
    cy.get('.main-container')
      .get('.product-item h2')
      .last()
      .should('have.text', 'Example Product')
      .get('.actions > i')
      .last()
      .click()
  })

  it('test add product with invalid url', () => {
    cy.visit('/product/add')
      .get('form')
      .get('input')
      .eq(0)
      .type('Example Product')
      .get('input')
      .eq(1)
      .type('Example ProductExample ProductExample ProductExample ProductExample Product')
      .get('input')
      .eq(2)
      .type('pizza.png')
      .get('form')
      .submit()
      .get('.add-product div h3')
      .should('have.text', 'Invalid URL!')      
  })

  it('test add product with invalid description', () => {
    cy.visit('/product/add')
      .get('form')
      .get('input')
      .eq(0)
      .type('Example Product')
      .get('input')
      .eq(1)
      .type('Example')
      .get('input')
      .eq(2)
      .type('https://pizza.png')
      .get('form')
      .submit()
      .get('.add-product div h3')
      .should('have.text', 'Description should be between 35 and 100 characters!')      
  })

  it('test add product with invalid name', () => {
    cy.visit('/product/add')
      .get('form')
      .get('input')
      .eq(0)
      .type('E')
      .get('input')
      .eq(1)
      .type('Example ProductExample ProductExample ProductExample ProductExample Product')
      .get('input')
      .eq(2)
      .type('https://pizza.png')
      .get('form')
      .submit()
      .get('.add-product div h3')
      .should('have.text', 'Name should be between 4 and 30 characters!')      
  })

  it('test register with invalid email', () => {
    cy.visit('/register')
      .get('form')
      .get('input')
      .eq(0)
      .type('E')
      .get('input')
      .eq(1)
      .type('Example')
      .get('input')
      .eq(2)
      .type('12345')
      .get('form')
      .submit()
      .get('.login-container div h3')
      .should('have.text', 'Invalid email!')      
  })

  it('test register with invalid username', () => {
    cy.visit('/register')
      .get('form')
      .get('input')
      .eq(0)
      .type('example@gmail.com')
      .get('input')      
      .eq(2)
      .type('12345')
      .get('form')
      .submit()
      .get('.login-container div h3')
      .should('have.text', 'Invalid username!')      
  })

  it('test register with invalid password', () => {
    cy.visit('/register')
      .get('form')
      .get('input')
      .eq(0)
      .type('example@gmail.com')
      .get('input')
      .eq(1)
      .type('Example')      
      .get('form')
      .submit()
      .get('.login-container div h3')
      .should('have.text', 'Password should be minimum 5 characters!')      
  })
});